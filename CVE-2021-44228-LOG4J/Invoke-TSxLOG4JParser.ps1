<#
.VERSION 1.3
1.3 - Encoding set to UTF8 in output CSV and set NoTypeInformation
1.2 - Changed name of logfile path and added variable
1.1 - Bug fix in error handling
1.0 - Initial release

.DESCRIPTION
This script will parse output from Invoke-TSxLOG4JChecker.ps1. It will combine the results to a CSV file.
Can parse output files from multiple systems. Collect all files to a subfolder from the script and name that folder LOG4JCollection or specify a different folder in $ResultFilePath.

.NOTES
 Author: Truesec Cyber Security Incident Response Team
 Website: https://truesec.com/
 Created: 2021-12-14

.DISCLAIMER
 Any of use of this script should be performed by qualified professionals with the necessary knowledge and skills to make independent conclusions.
 The script does not guarantee or in any way ensure, promise or indicate that after successful execution, a system can be declared as safe.
 The script should be used as a tool to help identify indicators of log4j precense on the system it is executed on.
#>

# Variables
$WorkPath = "$PSScriptRoot"
$ResultFilePath = "$WorkPath\LOG4JCollection"
$TimeStamp = Get-Date -uformat "%Y%m%d.%H%M%S"
$OutputFileName = "parsedLogs_$TimeStamp.csv"

# Get output files
$TranscriptFiles = (Get-ChildItem $ResultFilePath | Where-Object { $_.Name -match "Transcript" }).FullName
$JavaFiles = (Get-ChildItem $ResultFilePath | Where-Object { $_.Name -match "java_files" }).FullName 
$MatchFiles = (Get-ChildItem $ResultFilePath | Where-Object { $_.Name -match "matches" -or $_.Name -match "LOG4JClass" }).FullName
$ErrorFiles = (Get-ChildItem $ResultFilePath | Where-Object { $_.Name -match "errors" }).FullName

# Create parsed CSV
$Output = @()
foreach ($TranscriptFile in $TranscriptFiles) {
    $ComputerName = (($TranscriptFile).Split("\")[-1]).Split("_")[0]
    $FileTimeStamp = (($TranscriptFile).Split("_")[-1]).Replace(".txt", "")

    # Get transcript content and check for errors 
    $TranscriptContent = Get-Content $TranscriptFile
    $ErrorFileContent = $null
    if ($ErrorFiles)
    {
        $ErrorFileContent = Get-Content $ErrorFiles -ErrorAction SilentlyContinue | Where-Object {$_ -match $FileTimeStamp}
    }
    
    if (($TranscriptContent | Select-String "error") -or $ErrorFileContent) {
        $HasError = $true
        
        # Create transcript row entry
        $FileObject = New-Object pscustomobject
        $FileObject | Add-Member NoteProperty ComputerName $ComputerName
        $FileObject | Add-Member NoteProperty Timestamp $FileTimeStamp
        $FileObject | Add-Member NoteProperty File "Transcript file exist and contains error - investigate and verify"
        $FileObject | Add-Member NoteProperty Match $false
        $FileObject | Add-Member NoteProperty Error $HasError
        $Output += $FileObject
    }
    else {
        $HasError = $false

        # Create transcript row entry
        $FileObject = New-Object pscustomobject
        $FileObject | Add-Member NoteProperty ComputerName $ComputerName
        $FileObject | Add-Member NoteProperty Timestamp $FileTimeStamp
        $FileObject | Add-Member NoteProperty File "Transcript file exist - no error found in file"
        $FileObject | Add-Member NoteProperty Match $false
        $FileObject | Add-Member NoteProperty Error $HasError
        $Output += $FileObject
    }


    # Check if Java File output exist
    $JavaFileExist = $null
    if ($JavaFiles | Where-Object { $_ -match $FileTimeStamp }) {
        $JavaFileExist = $JavaFiles | Where-Object { $_ -match $FileTimeStamp }
    }

    # check if Matched File output exist
    $MatchExist = $null
    if ($MatchFiles | Where-Object { $_ -match $FileTimeStamp }) {
        $MatchExist = $MatchFiles | Where-Object { $_ -match $FileTimeStamp }
    }

    # Create file row entry
    if ($JavaFileExist) {
        $JarFiles = Get-Content $JavaFileExist
        if ($MatchExist) {
            $MatchedFiles = Get-Content $MatchExist
            foreach ($Jarfile in $JarFiles) {
                $FileName = $Jarfile
                $IsMatched = $null
                if ($MatchedFiles -contains $FileName) {
                    $IsMatched = $true
                }
                else {
                    $IsMatched = $false
                }

                $FileObject = New-Object pscustomobject
                $FileObject | Add-Member NoteProperty ComputerName $ComputerName
                $FileObject | Add-Member NoteProperty Timestamp $FileTimeStamp
                $FileObject | Add-Member NoteProperty File $FileName
                $FileObject | Add-Member NoteProperty Match $IsMatched
                $FileObject | Add-Member NoteProperty Error $HasError
                $Output += $FileObject
            }
        }
        else {
            foreach ($Jarfile in $JarFiles) {
                $FileName = $Jarfile
                $IsMatched = $false
            
                $FileObject = New-Object pscustomobject
                $FileObject | Add-Member NoteProperty ComputerName $ComputerName
                $FileObject | Add-Member NoteProperty Timestamp $FileTimeStamp
                $FileObject | Add-Member NoteProperty File $FileName
                $FileObject | Add-Member NoteProperty Match $IsMatched
                $FileObject | Add-Member NoteProperty Error $HasError
                $Output += $FileObject
            }
        }
    }
}

# Export parsed data to CSV
$Output | Export-Csv -Path "$Workpath\$OutputFileName" -Encoding UTF8 -NoTypeInformation